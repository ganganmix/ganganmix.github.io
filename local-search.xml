<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络:iso模型和计算机的理解</title>
    <link href="/2023/01/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-iso%E6%A8%A1%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2023/01/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-iso%E6%A8%A1%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="导论——计算机网络的核心-组成与协议"><a href="#导论——计算机网络的核心-组成与协议" class="headerlink" title="导论——计算机网络的核心:组成与协议"></a>导论——计算机网络的核心:组成与协议</h1><ol><li>由计算机组成的world<ul><li>局域网(LAN)的概念与组成</li><li>广域网(WAN)的概念与组成</li><li>互联网(INTERNET)的概念与组成</li></ul></li><li>由协议组成的world<ul><li>iso七层模型</li><li>简化版四层概念模型</li></ul></li><li>网络的流程<ul><li>如何通信</li><li>如何访问</li><li>如何创造</li></ul></li></ol><blockquote><h3 id="局域网-LAN-的概念与组成"><a href="#局域网-LAN-的概念与组成" class="headerlink" title="局域网(LAN)的概念与组成"></a>局域网(LAN)的概念与组成</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>局域网(LAN)<strong>是:局部地区形成的一个</strong>区域网络</strong>，其自身相对其他网络传输速度更快，性能更稳定，框架更简易，而且这是封闭性的。但是局域网会有一个与外界网络的<strong>接入点</strong>（<em>比如路由器的WAN口</em>，接入的设备(路由器)主要负责中继无线计算机(网络设备)之间的数据包传输和分配，还负责中继无线计算机(网络设备)和internet之间的数据包）来作为交换机等处理数据。无线局域网(WLAN)有一个通信标准——<strong>IEEE 802.11</strong>,<strong>Wi-Fi</strong>就是对这一标准最好的实现。<del>要长脑子了😋</del></p><p>（<font color="red"><strong>路由器和交换机并不是一个概念，路由器在网络层，路由器会分配子网的IP地址并根据IP地址寻址，还可以处理TCP/IP协议，交换机不可以。交换机在中继层，它根据MAC地址寻址，用来分配网络数据，也就是要用LAN口物理链接</strong></font>）<strong>但是现在家用路由器一般都集成了交换机的功能</strong></p><img src="\img\计算机网络-iso模型和计算机的理解\局域网原理.jpg" alt="局域网原理" style="zoom:67%;" /><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>局域网的基本组成是硬件系统和软件系统(<del>网上查的，俺真厉害😊👈🤣</del>)</p><blockquote><p>硬件系统</p><p><strong>网络服务器、网络工作站、链接设备(网卡)以及传输介质和其他互连设备</strong></p><p><em>网络服务器</em>：种类很多，分为文件服务器，打印服务器，硬件服务器等等。当然这些也都是非必要的。</p><p><em>网络工作站</em>：也就是客户端(client)，一般就是电脑计算机哒💻。可以通过软件等访问网络服务器进行操作。</p><p><em>连接设备</em>：即是网卡，简称”NIC“，它是链接计算机与网络的硬件的设备(种类非常多😵)。</p><p>传输介质：就像空气是声音传播的介质一样，上述的设备通信和数据传输都需要介质，一般的传输介质是<strong>双绞线，同轴电缆，光纤等</strong>。</p><p>其他…🤗🤗🤗</p></blockquote><img src="\img\计算机网络-iso模型和计算机的理解\标准局域网.jpg" alt="标准局域网" style="zoom:67%;" /><p><del>在个人设备localhost(127.0.0.1)网段下的进程不被外界打扰，也像是一个小型的LAN</del></p></blockquote><hr><blockquote><h4 id="广域网-WAN-的概念与组成"><a href="#广域网-WAN-的概念与组成" class="headerlink" title="广域网(WAN)的概念与组成"></a>广域网(WAN)的概念与组成</h4><blockquote><p>**广域网(WAN)**是一种大型的，地域型的计算机网络集合，但其范围可以超过城市，国家乃至全球。</p><p><font color="red"><strong>我再学学😋😋😋</strong></font></p></blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QQbot第一弹:nonebot的原理————go-cqhttp的数据包</title>
    <link href="/2023/01/11/QQbot%E7%AC%AC%E4%B8%80%E5%BC%B9-nonebot%E7%9A%84%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94gocqhttp%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <url>/2023/01/11/QQbot%E7%AC%AC%E4%B8%80%E5%BC%B9-nonebot%E7%9A%84%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94gocqhttp%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><ol><li>go-cqhttp的链接<ul><li>项目的概述</li></ul></li><li>go-cqhttp与nonebot的通信连接<ul><li>连接方式</li><li>socket服务器的接收实例</li><li>websocket服务器的接收实例</li></ul></li></ol><blockquote><h3 id="go-cqhttp的链接"><a href="#go-cqhttp的链接" class="headerlink" title="go-cqhttp的链接"></a>go-cqhttp的链接</h3><ul><li><h4 id="项目的概述"><a href="#项目的概述" class="headerlink" title="项目的概述"></a>项目的概述</h4></li></ul><p><b><a href="https://docs.go-cqhttp.org/">go-cqhttp</a></b>,基于 Mirai 以及 MiraiGo 的 OneBot Golang 原生实现的项目，主力是go语言编写(<font color=red><s>俺也不会捏</s></font>🤗)</p></blockquote><p>(反正就是ddl很nb哒←<font size="2" color="cyan">明明什么都不知道的小白</font>👈😂)</p><blockquote><p>它的兼容性:</p><div id="interface"><font size="4" color="black"><b>接口</b></font></div><ul><li><p>http api</p></li><li><p>反向http post</p></li><li><p>正向websocket</p></li><li><p>反向websocket</p></li></ul><p><font size="4" color="black"><b>性能</b></font></p><ul><li>在关闭数据库的情况下, 加载 25 个好友 128 个群运行 24 小时后内存使用为 10MB 左右. 开启数据库后内存使用将根据消息量增加 10-20MB , 如果系统内存小于 128M 建议关闭数据库使用。<br><a href="https://docs.go-cqhttp.org/">go-cqhttp 帮助中心</a></li></ul><p><img src="https://user-images.githubusercontent.com/25968335/120111974-8abef880-c139-11eb-99cd-fa928348b198.png" alt="go-cqhttp"></p></blockquote><hr><h2 id="go-cqhttp与nonebot的通信连接"><a href="#go-cqhttp与nonebot的通信连接" class="headerlink" title="go-cqhttp与nonebot的通信连接"></a>go-cqhttp与nonebot的通信连接</h2><ul><li><h4 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h4></li></ul><p>go-cqhttp与nonebot的链接可以选择gc提供的<a href="#interface">接口</a>的几种方式</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\interface.png" alt="interface" style="zoom:60%;" /><p>我想要反向websocket进行获取，就是我作websoocket的服务器，让go-cqhttp作客户端给我们发送消息<font color="red"><s>(其实是因为不是很了解这些接口)</s></font>，我好菜😭😭😭</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\choose.png" alt="choose" style="zoom:60%;" /><p>选择3，反向websocket，这样也可以看看go-cqhttp的到底发的什么玩意😋😋😋</p><ul><li><h4 id="socket服务器的简单实例"><a href="#socket服务器的简单实例" class="headerlink" title="socket服务器的简单实例"></a>socket服务器的简单实例</h4></li></ul><p>我们先打开go-cqhttp并登录</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\gocq_login.png" alt="gocq_login" style="zoom:50%;" /><p>下面是一个简单的socket服务器，那么为什么要用socket而不是websocket捏，因为<s>我搞错了&gt; 😋</s>，因为我也想知道如果协议不对，go-cqhttp会发个什么东西过来😊😊😊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>server = socket.socket(socket.AF_INET, socket.sock_STREAM)<br>server.bind((<span class="hljs-string">&quot;&quot;</span>, post)) <span class="hljs-comment"># 端口号</span><br>server.listen(<span class="hljs-number">126</span>) <span class="hljs-comment"># 设置监听，参数为最大队列数</span><br>new_socket, path = server.sccept()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = new_socket.recv()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        new_socket.close()<br>        <span class="hljs-keyword">break</span><br>server.close()<br></code></pre></td></tr></table></figure><p>↑(<font color="blue"><s>什么垃圾code</s></font>😭😭😭)</p><p>运行之后,出现一次心跳包后就close了，说明go-cqhttp客户端发现协议不对，主动断开链接了:</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\gocq_warning.png" alt="gocq_warning" style="zoom:60%;" /><p>显示<font color="red"><b>unexpected EOF</b></font>,至于是什么意思。。。（自行baidu😊👈😂）</p><p>我们看看python的socket服务端，它为我们提供了更详细的内容:</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\gocq_py.png" alt="gocq_py" style="zoom:60%;" /><p>发现<font color="red"><b>Connection: Upgrade</b></font>和<font color="red"><b>Upgrade: websocket</b></font>，意思就是说要更换成<b>websocket</b></p><p><b>好！那就换吧</b>🤗🤗🤗</p><hr><ul><li><h4 id="websocket服务器的接收实例"><a href="#websocket服务器的接收实例" class="headerlink" title="websocket服务器的接收实例"></a>websocket服务器的接收实例</h4></li></ul><p>我使用python写了一个简单的异步websocket服务器，用json来解析json数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> websocket<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>(<span class="hljs-params">websocket, path</span>): <span class="hljs-comment">#创建一个异步回调函数data，传入两个参数，websocket套接字，path数据协议</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> websocket: <span class="hljs-comment"># 迭代出websocket里面的数据</span><br>        j = json.loads(message)<br>        <span class="hljs-built_in">print</span>(j)<br>asyncio.get_event_loop().run_until_compete(websocket.server(data, <span class="hljs-string">&quot;localhost&quot;</span>, post)) <span class="hljs-comment"># 传入post，host，和</span><br>asyncio.get_event_loop().run_forever()<br></code></pre></td></tr></table></figure><blockquote><p>我们通过异步的方式接收代码，得到的数据可以分为三种</p><blockquote><p>连接成功的提示消息：(成功时会发出消息”<strong>meta_event_type”为”lifecycle</strong>“)</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\success.png" alt="success" style="zoom:60%;" /><p>与客户端的<u>心跳</u><s>❤️</s>包:  (心跳包的”<strong>post_type”是”meta_event</strong>“)</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\mete_event.png" alt="mete_event" style="zoom:60%;" /><p>对应的消息数据：(news_event的**”post_type”是”message”**)</p><img src="\img\QQbot第一弹-nonebot的原理——gocqhttp的数据包\message_data.png" alt="message_data" style="zoom:60%;" /></blockquote><p>这其中的就包括相应的<b>消息数据</b>，<b>time</b>等等👈😊，也就是有了nb的第一版(bushi</p></blockquote><p>最后，挂一张老婆  <a href="https://github.com/Ikaros-521"><strong>Love丶伊卡洛斯</strong></a>(java大佬，<a href="https://space.bilibili.com/3709626">b站up</a>，<s><font color="red"><b>大厂员工(不干了)</b></font></s>)：</p><p><img src="https://avatars.githubusercontent.com/u/40910637?v=4" alt="**Love丶伊卡洛斯**"></p>]]></content>
    
    
    
    <tags>
      
      <tag>nonebot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇:hello world!</title>
    <link href="/2023/01/11/%E7%AC%AC%E4%B8%80%E7%AF%87-hello-world/"/>
    <url>/2023/01/11/%E7%AC%AC%E4%B8%80%E7%AF%87-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇写的目的其实就是说明，俺要开始写了，所以是hallo-world"><a href="#第一篇写的目的其实就是说明，俺要开始写了，所以是hallo-world" class="headerlink" title="第一篇写的目的其实就是说明，俺要开始写了，所以是hallo world!"></a>第一篇写的目的其实就是说明，俺要开始写了，所以是<font color="red">hallo world</font>!</h1><blockquote><p>我以后会用test这个tag来收集md编写技巧或者一些什么东西,也可以不用看吧🤗🤗🤗</p></blockquote><h2 id="留下点东西吧"><a href="#留下点东西吧" class="headerlink" title="留下点东西吧"></a>留下点东西吧</h2><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world!&quot;</span>)<br></code></pre></td></tr></table></figure><p>javascript</p></blockquote><blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world!&quot;</span>)<br></code></pre></td></tr></table></figure><p>python</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloworld</span>&#123;  <span class="hljs-comment">//public类名要与java文件名一致,也就是文件的出口</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[] args)</span>&#123;<br>       System.out.print(<span class="hljs-string">&quot;hello world!&quot;</span>); <span class="hljs-comment">//有System.out当然有System.in哒😊</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java</p></blockquote><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>go</p></blockquote><blockquote><blockquote><p>最后,贴一张我的偶像<a href="https://github.com/djkcyl">A60</a>🥵🥵🥵,是我暂时的信仰捏😋😋😋</p></blockquote><p><img src="https://avatars.githubusercontent.com/u/59153990?v=4" alt="A60"></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
